#imports
import argparse
from .ggcaller import *

def get_options():
    description = 'Generates ORFs from a Bifrost graph.'
    parser = argparse.ArgumentParser(description=description,
                                     prog='ggcaller')

    IO = parser.add_argument_group('Input/output')
    IO.add_argument('--graph',
                        help='Bifrost GFA file generated by Bifrost build. ')
    IO.add_argument('--colours',
                        help='TSV colours file generated by Bifrost query. ')
    IO.add_argument('--source',
                    help='List of source genomes used to construct Bifrost graph (one file path per line). ')
    IO.add_argument('--kmer',
                        help='K-mer size used in Bifrost build (bp). ')
    IO.add_argument('--path',
                    default=10000,
                    help='Maximum path length during traversal (bp). '
                    '[Default = 10000] ')
    IO.add_argument('--orf',
                    default=90,
                    help='Minimum ORF length to return (bp). '
                    '[Default = 90] ')
    IO.add_argument('--write-idx',
                    default=True,
                    help='Write FMIndexes to file. '
                         '[Default = True] ')
    IO.add_argument('--threads',
                    default=1,
                    help='Number of threads for FMIndexing '
                         '[Default = 1] ')
    IO.add_argument('--out',
                    default='calls.fasta',
                    help='Output FASTA file containing ORF sequences. ')
    return parser.parse_args()

def main():
    options = get_options()

    # parse command line arguments
    graph_file = options.graph
    tsv_file = options.colours
    ksize = int(options.kmer)
    path_length = int(options.path)
    ORF_length = int(options.orf)
    source_genomes = options.source
    write_idx = bool(options.write_idx)
    num_threads = int(options.threads)
    output = options.out

    # define start/stop codons
    stop_codon_list = ["TAA", "TGA", "TAG"]
    start_codon_list = ["ATG", "GTG", "TTG"]

    # generate networkx object and annotate with colours
    graph = generate_graph(graph_file, ksize, stop_codon_list, tsv_file)

    # generate ORFs
    ORF_output = ORF_generation(graph, stop_codon_list, start_codon_list, ksize, False, length=path_length)

    #remove artificially generated strings
    print("Generating FMIndexes and identifying artificially generated gene calls... ")
    check_ORF_in_source(source_genomes, ORF_output, write_idx, num_threads)

    # generate fasta
    print("Generating gene call FASTA file...")
    generate_fasta(ORF_output, output, ORF_length)
    print("Done.")

    sys.exit(0)

if __name__ == '__main__':
    main()